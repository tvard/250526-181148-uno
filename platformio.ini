; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env:receiver_firmware]
platform = atmelavr
board = pro16MHzatmega328
framework = arduino
upload_speed = 115200     ; <-- required ft232rl (cant auto-detect)
lib_deps = 
	mbed-syundo0730/I2Cdev@0.0.0+sha.3aa973ebe3e5
	epsilonrt/RadioHead @ ^1.122.1
	jrowberg/I2Cdevlib-Core@^1.0.1
	jrowberg/I2Cdevlib-MPU6050
build_src_filter = +<2WD_RC_RECEIVER.cpp> +<motor_helpers.cpp> +<other_helpers.cpp>

[env:transmitter_firmware]
platform = atmelavr
board = pro16MHzatmega328
framework = arduino
upload_speed = 115200     ; <-- required ft232rl (cant auto-detect)
lib_deps = 
	adafruit/Adafruit GFX Library @ ^1.12.1
	adafruit/Adafruit SSD1306 @ ^2.5.15
	nrf24/RF24 @ ^1.5.0
build_src_filter = +<2WD_RC_TRANSMITTER.cpp>

[env:arduino_as_isp]
platform = atmelavr
board = uno
framework = arduinoextra_scripts = burn_bootloader.py

build_src_filter = +<ArduinoISP.cpp>
platform_packages = platformio/tool-avrdude@^1.70200.0

[env:unit_tests]
platform = native
lib_deps = 
	throwtheswitch/Unity @ ^2.6.0
build_flags = 
	-I test
	-IC:/mingw64/include
	-IC:/mingw64/x86_64-w64-mingw32/include
	-IC:/mingw64/lib/gcc/x86_64-w64-mingw32/15.1.0/include/c++
	-IC:/mingw64/lib/gcc/x86_64-w64-mingw32/15.1.0/include/c++/x86_64-w64-mingw32
	-IC:/mingw64/lib/gcc/x86_64-w64-mingw32/15.1.0/include/c++/backward
	-DARDUINO_AVR_PRO16MHZATMEGA328
platform_packages = platformio/tool-avrdude@^1.70200.0

[env:bootloader]
platform = atmelavr
board = pro16MHzatmega328
framework = arduino
targets = upload
; Override the upload protocol to use a custom command
upload_protocol = custom
upload_port = /dev/ttyACM0
upload_speed = 19200
platform_packages = platformio/tool-avrdude@^1.70200.0
build_src_filter = +<Dummy.cpp>
; Define the custom command to burn both fuses and bootloader
extra_scripts = burn_bootloader.py
; board_bootloader.file = optiboot/optiboot_atmega328.hex
; board_bootloader.lfuse = 0xFF
; board_bootloader.hfuse = 0xDA
; board_bootloader.efuse = 0x05