; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env:receiver_firmware]
platform = atmelavr
board = pro16MHzatmega328
framework = arduino
lib_deps = 
    mbed-syundo0730/I2Cdev@0.0.0+sha.3aa973ebe3e5
    epsilonrt/RadioHead @ ^1.122.1
    jrowberg/I2Cdevlib-Core@^1.0.1
    jrowberg/I2Cdevlib-MPU6050
build_src_filter = +<2WD_RC_RECEIVER.cpp> +<motor_helpers.cpp> +<other_helpers.cpp>
; FOR BOARDS WITHOUT DTR (RTS INSTEAD), UNCOMMENT BELOW. WRAPPER PULSES RTS LOW BEFORE UPLOAD (SIMULATING DTR)
; upload_command = python rts_reset_upload_wrapper.py $UPLOAD_PORT 

[env:transmitter_firmware]
platform = atmelavr
board = pro16MHzatmega328
framework = arduino
lib_deps = 
  ; mbed-syundo0730/I2Cdev@0.0.0+sha.3aa973ebe3e5
  ; testato/SoftwareWire @ ^1.6.0 ; bigbang I2C library for ATmega328P
  adafruit/Adafruit GFX Library @ ^1.12.1
  adafruit/Adafruit SSD1306 @ ^2.5.15
  nrf24/RF24 @ ^1.5.0
build_src_filter = +<2WD_RC_TRANSMITTER.cpp>

; Native build environment for C/C++ unit tests. Run with `pio test -e native`
; This environment uses the Unity testing framework for C/C++ unit tests.
; The tests are located in the `test` directory, and the Unity headers are included from there.
; It is configured to use MinGW64 C++ headers instead of Arduino framework libraries.
; The build flags include paths to the MinGW64 C++ standard library headers and architecture-specific headers.
[env:UnitTests]
platform = native                ; Native (C/C++, non-arduino) build environment
lib_deps =
  throwtheswitch/Unity @ ^2.6.0  ; Unity testing framework for C/C++ (https://docs.platformio.org/en/stable/advanced/unit-testing/frameworks/unity.html)
build_flags =                                                                     ; Flags for [native] env, use MinGW64 C++ headers instead of Arduino framework libs
  -I test                                                                         ; Include the test directory for Unity headers
  -IC:/mingw64/include                                                             ; Include MinGW general headers
  -IC:/mingw64/x86_64-w64-mingw32/include                                         ; Include MinGW architecture-specific headers
  -IC:/mingw64/lib/gcc/x86_64-w64-mingw32/15.1.0/include/c++                      ; Include C++ standard library headers
  -IC:/mingw64/lib/gcc/x86_64-w64-mingw32/15.1.0/include/c++/x86_64-w64-mingw32   ; Include C++ implementation-specific headers
  -IC:/mingw64/lib/gcc/x86_64-w64-mingw32/15.1.0/include/c++/backward             ; Include C++ backward compatibility headers
  -DARDUINO_AVR_PRO16MHZATMEGA328                                                 ; Define specific board variant


; For New Bootloader Burning (e.g. replaced ATMEGA328P IC)
[env:bootloader]
platform = atmelavr
board = pro16MHzatmega328       ; target board for bootloader burn 
framework = arduino
targets = bootloader, fuses     ; will immediately burn bootloader and set fuses
upload_protocol = arduinoisp    ; Use Arduino Uno running ArduinoISP as ISP programmer
; upload_protocol = arduino
; upload_protocol = usbasp      ; Use if you have a USBasp programmer
; upload_protocol = stk500v1    ; Use if you're using an FTDI programmer *as a programmer* (rare)
; upload_protocol = serial      ; Only valid if bootloader is already present (normal sketch upload)
upload_port = COM3              ; we must specify when using arduinoisp protocol
upload_speed = 19200            ; <-- REQUIRED for ArduinoISP to work correctly

; Bootloader firmware to write
board_bootloader.file = optiboot/optiboot_atmega328.hex ; Path is relative to: %USERPROFILE%/.platformio/packages/framework-arduino-avr/bootloaders/
                                                        ; You can also specify an absolute path if needed, e.g. c:/Users/theov/path/to/bootloader.hex
; Fuse settings for ATmega328P (These control clock source, bootloader size, startup timing, brown-out detection, etc.)
board_bootloader.lfuse = 0xFF  ; External 16 MHz crystal
board_bootloader.hfuse = 0xDA  ; Enable SPI, Boot Reset, 2K boot section, no EEPROM erase
board_bootloader.efuse = 0x05  ; BODLEVEL = 2.7V (common for 5V boards); rest unused

; Alternatives:
; board_bootloader.hfuse = 0xDE  ; If you're using the old bootloader with 512B section
; board_bootloader.efuse = 0xFD  ; Sets BODLEVEL = 4.3V (rare), probably too high for Pro Mini
